https://leetcode.com/problems/minimum-path-sum/
64. Minimum Path Sum 

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Subscribe to see which companies asked this question

#一开始用了Dfs暴力解，果然超时了，想一想这个复杂度大概是指数级的。然后看了一下Discuss，是一道Dp题。

#下面是我个人的暴力解，果然第20个case就超时了。
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid[0])
        m = len(grid)
        min_sum = []
        i, j = 0, 0
        sum = 0
        self.dfs(grid, sum, i, j, min_sum, n, m)
        return min(min_sum)
            
    def dfs(self, grid, sum, i, j, min_sum, n, m):
        sum += grid[i][j]
        if i < m - 1:
            k = i + 1
            self.dfs(grid, sum, k, j, min_sum, n, m)
        if j < n - 1:
            k = j + 1
            self.dfs(grid, sum, i, k, min_sum, n, m)
        if i == m - 1 and j == n - 1:
            min_sum.append(sum)
            
 #下面是Discuss上的DP解法
 https://discuss.leetcode.com/topic/13498/simple-python-dp-70ms
 def minPathSum(self, grid):
    m = len(grid)
    n = len(grid[0])
    for i in range(1, n):
        grid[0][i] += grid[0][i-1]
    for i in range(1, m):
        grid[i][0] += grid[i-1][0]
    for i in range(1, m):
        for j in range(1, n):
            grid[i][j] += min(grid[i-1][j], grid[i][j-1])
    return grid[-1][-1]
